{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","gifLink","setGifLink","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","connect","onlyIfTrusted","response","console","log","publicKey","toString","alert","error","connectWallet","sendGif","e","preventDefault","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","connection","Connection","Provider","account","fetch","createGifAccount","initialize","systemProgram","programId","signers","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","value","onChange","target","type","placeholder","map","gif","i","src","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d13d005.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport idl from './idl.json'\nimport kp from './keypair.json'\n\nconst { SystemProgram } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\nconst programID = new PublicKey(idl.metadata.address);\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = { preflightCommitment: \"processed\" }\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [gifLink, setGifLink] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      if (window.solana) {\n        if (window.solana.isPhantom) {\n          const response = await window.solana.connect({ onlyIfTrusted: true });\n          console.log('Wallet connected with public key: ', response.publicKey.toString())\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Please install Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    if (window.solana) {\n      const response = await window.solana.connect();\n      setWalletAddress(response.publicKey.toString());\n    }\n  }\n\n  const sendGif = async e => {\n    e.preventDefault();\n    if (gifLink.length === 0) {\n      alert('No gif link was given!')\n      return\n    }\n    setGifLink('')\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(gifLink, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log(\"GIF successfully sent to program\", gifLink)\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  }\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"initialize\")\n      await program.rpc.initialize({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected()\n    }\n    window.addEventListener('load', onLoad)\n    return () => window.removeEventListener('load', onLoad)\n  }, [])\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Oeeeee ðŸ–¼GIF Portal</p>\n          <p className=\"sub-text\">\n            View your Muay Thai GIF collection in the metaverse âœ¨\n          </p>\n          {!walletAddress && (\n            <button\n              className=\"cta-button connect-wallet-button\"\n              onClick={connectWallet}\n            >\n              Connect to Wallet\n            </button>\n          )}\n          {walletAddress && gifList === null ? (\n            <div className=\"connected-container\">\n              <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n                Do One-Time Initialization For GIF Program Account\n              </button>\n            </div>\n          ) : (\n            <div className=\"connected-container\">\n              <form onSubmit={sendGif}>\n                <input\n                  value={gifLink}\n                  onChange={e => setGifLink(e.target.value)}\n                  type=\"text\"\n                  placeholder=\"Enter gif link!\"\n                />\n                <button onClick={sendGif} type=\"submit\" className=\"cta-button submit-gif-button\">Submit</button>\n              </form>\n              <div className=\"gif-grid\">\n                {gifList.map((gif, i) => (\n                  <div className=\"gif-item\" key={i}>\n                    <img src={gif.gifLink} alt={gif} />\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}